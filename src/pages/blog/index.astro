---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import BlogPostCard from '../../components/BlogPostCard.astro';

// Get all blog posts
const posts = await getCollection('blog');

// Get unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags))];

// Sort posts by date
const sortedPosts = [...posts].sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<Layout title="Blog | Amogh Jambekar">
  <div class="container">
    <div class="header">
      <h1>Blog</h1>
      <div class="filters">
        <div class="filter-section">
          <select id="tag-select" class="filter-select">
            <option value="">All Tags</option>
            {allTags.map(tag => (
              <option value={tag}>{tag}</option>
            ))}
          </select>
        </div>
        <div class="filter-section">
          <select id="sort-select" class="filter-select">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
          </select>
        </div>
      </div>
    </div>

    <div class="post-list">
      {sortedPosts.map(post => (
        <BlogPostCard
          title={post.data.title}
          date={post.data.date}
          excerpt={post.data.description}
          tags={post.data.tags}
          url={`/blog/${post.slug}`}
        />
      ))}
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 120px 20px 40px 20px;
  }

  .header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 2rem;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    letter-spacing: -0.025em;
    margin: 0;
  }

  .filters {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .filter-select {
    padding: 0.5rem 2.5rem 0.5rem 1rem;
    border-radius: 8px;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.7rem center;
    background-size: 1em;
  }

  .filter-select:hover {
    border-color: var(--text-tertiary);
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--text-primary);
  }

  .post-list {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  @media (max-width: 768px) {
    .container {
      padding: 100px 16px 24px 16px;
    }

    .header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    h1 {
      font-size: 2rem;
    }

    .filters {
      width: 100%;
    }

    .filter-select {
      flex: 1;
      min-width: 120px;
    }
  }
</style>

<script>
  // Filter and sort functionality
  document.addEventListener('DOMContentLoaded', () => {
    const tagSelect = document.querySelector('#tag-select') as HTMLSelectElement;
    const sortSelect = document.querySelector('#sort-select') as HTMLSelectElement;
    const postList = document.querySelector('.post-list');

    if (!tagSelect || !sortSelect || !postList) {
      console.error('Required elements not found');
      return;
    }

    const posts = Array.from(postList.children);

    const updatePosts = () => {
      const selectedTag = tagSelect.value;
      const sortOrder = sortSelect.value;

      const filteredPosts = posts.filter(post => {
        if (!selectedTag) return true;
        const tags = Array.from(post.querySelectorAll('.tag')).map(tag => tag.textContent?.toLowerCase() || '');
        return tags.includes(selectedTag.toLowerCase());
      });

      const sortedPosts = filteredPosts.sort((a, b) => {
        const dateA = new Date(a.querySelector('time')?.getAttribute('datetime') || '');
        const dateB = new Date(b.querySelector('time')?.getAttribute('datetime') || '');
        return sortOrder === 'newest' ? dateB.getTime() - dateA.getTime() : dateA.getTime() - dateB.getTime();
      });

      // Clear and repopulate the post list
      while (postList.firstChild) {
        postList.removeChild(postList.firstChild);
      }
      sortedPosts.forEach(post => postList.appendChild(post.cloneNode(true)));
    };

    tagSelect.addEventListener('change', updatePosts);
    sortSelect.addEventListener('change', updatePosts);
  });
</script>