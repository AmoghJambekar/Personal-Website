---
import Navbar from '../../components/Navbar.astro';

// Temporary static data
const album = {
  data: {
    title: "Coming Soon",
    date: new Date(),
    description: "Photo album feature coming soon",
    images: []
  }
};

/* Comment out until content is ready
export async function getStaticPaths() {
  const albums = await getCollection('photos');
  return albums.map(album => ({
    params: { slug: album.slug },
    props: { album },
  }));
}
*/

// const { Content } = await album.render();
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={album.data.description} />
    <title>{album.data.title} | Photos | Amogh Jambekar</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/feather-icons/dist/feather.min.js"></script>
  </head>
  <body>
    <Navbar />
    
    <main>
      <!-- Back Button -->
      <a href="/photos" class="back-button">
        <i data-feather="arrow-left"></i>
        Back to Albums
      </a>

      <!-- Album Header -->
      <header>
        <h1>{album.data.title}</h1>
        <time>
          {new Date(album.data.date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        <p>{album.data.description}</p>
      </header>

      <!-- Photo Grid -->
      <div class="photo-grid">
        {album.data.images.map(image => (
          <figure>
            <img
              src={image.url}
              alt={image.caption || album.data.title}
              loading="lazy"
            />
            {image.caption && (
              <figcaption>{image.caption}</figcaption>
            )}
          </figure>
        ))}
      </div>

      <!-- Additional Content -->
      <div class="content">
        <Content />
      </div>
    </main>

    <style>
      /* Replace Tailwind classes with proper CSS */
      main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 3rem 1rem;
      }

      .back-button {
        display: inline-flex;
        align-items: center;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        text-decoration: none;
      }

      .back-button:hover {
        color: var(--text-primary);
      }

      .back-button i {
        margin-right: 0.5rem;
      }

      header {
        margin-bottom: 3rem;
      }

      h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: var(--text-primary);
      }

      time {
        display: block;
        color: var(--text-secondary);
        margin-bottom: 1rem;
      }

      .photo-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2rem;
        margin: 2rem 0;
      }

      figure {
        position: relative;
      }

      img {
        width: 100%;
        height: auto;
        border-radius: 0.5rem;
        transition: transform 0.3s ease;
      }

      figure:hover img {
        transform: scale(1.02);
      }

      figcaption {
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
      }

      .content {
        margin-top: 3rem;
        color: var(--text-secondary);
      }

      @media (max-width: 768px) {
        .photo-grid {
          grid-template-columns: 1fr;
          gap: 1rem;
        }

        h1 {
          font-size: 2rem;
        }
      }
    </style>

    <script is:inline>
      // Check for saved theme preference immediately
      const savedTheme = localStorage.getItem('theme') || 'light';
      document.documentElement.classList.toggle('dark', savedTheme === 'dark');

      // Initialize Feather icons and handle theme
      document.addEventListener('DOMContentLoaded', () => {
        const isDark = document.documentElement.classList.contains('dark');
        const themeToggle = document.querySelector('.theme-toggle i');
        if (themeToggle) {
          themeToggle.setAttribute('data-feather', isDark ? 'sun' : 'moon');
        }
        feather.replace();

        // Image lazy loading
        const images = document.querySelectorAll('img[loading="lazy"]');
        if ('loading' in HTMLImageElement.prototype) {
          images.forEach(img => {
            img.loading = 'lazy';
          });
        } else {
          // Fallback for browsers that don't support lazy loading
          const script = document.createElement('script');
          script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';
          document.body.appendChild(script);
        }
      });

      // Define toggleTheme globally
      function toggleTheme() {
        const html = document.documentElement;
        const isDark = html.classList.toggle('dark');
        const themeToggle = document.querySelector('.theme-toggle i');
        
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        
        if (themeToggle) {
          themeToggle.setAttribute('data-feather', isDark ? 'sun' : 'moon');
          feather.replace();
        }
      }
    </script>
  </body>
</html>