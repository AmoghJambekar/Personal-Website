---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import fs from 'fs/promises';
import path from 'path';

interface ImageData {
  url: string;
  caption?: string;
  alt?: string;
  protection?: string;
}

export async function getStaticPaths() {
  const albums = await getCollection('photos');
  return albums.map(album => ({
    params: { slug: album.slug },
    props: { album },
  }));
}

const { album } = Astro.props;
const { Content } = await album.render();

// Get all images from the Last-Day directory
const lastDayDir = path.join(process.cwd(), 'public', 'photos', 'Last-Day');
const files = await fs.readdir(lastDayDir);
const imageFiles = files.filter(file => 
  /\.(jpg|jpeg|png|gif|heic)$/i.test(file)
);

// Create image objects for all files
const allImageObjects = imageFiles.map(file => ({
  url: `/photos/Last-Day/${file}`,
  caption: "Last Day of School 2025",
  alt: "Last Day of School Photo",
  protection: "public"
}));

// Sort images to put protected ones first when unlocked
const sortedImages = allImageObjects.sort((a, b) => {
  const protectionA = a.protection || 'protected';
  const protectionB = b.protection || 'protected';
  
  // Protected images first
  if (protectionA !== 'public' && protectionB === 'public') return -1;
  if (protectionA === 'public' && protectionB !== 'public') return 1;
  return 0;
});
---

<Layout title={`${album.data.title} | Photos | Amogh Jambekar`}>
    <main>
      <div class="content-wrapper">
        <!-- Back Button -->
        <a href="/photos" class="back-button">
          <i data-feather="arrow-left"></i>
          Back to Albums
        </a>

        <!-- Album Header -->
        <header>
          <h1>{album.data.title}</h1>
          <time>
            {new Date(album.data.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
          <p>{album.data.description}</p>
        </header>
      </div>

      <!-- Loading State -->
      <div class="loading-state">
        <div class="loading-spinner"></div>
        <p>Loading photos...</p>
      </div>

      <!-- Photo Grid -->
      <div class="photo-grid">
        {sortedImages.map((image, index) => {
          const imgSrc = image.url;
          const protection = image.protection || 'protected';
          const isProtected = protection !== 'public';
          
          return (
            <figure 
              class="photo-item"
              data-image={imgSrc}
              data-protection={protection}
              data-index={index}
            >
              <img
                src={imgSrc}
                alt={image.alt || album.data.title}
                loading="lazy"
                onload="this.parentElement.classList.add('loaded')"
              />
              {isProtected && <div class="protected-indicator"></div>}
            </figure>
          );
        })}
      </div>

      <!-- Full Size Image Viewer -->
      <div id="fullSizeViewer" class="full-size-viewer">
        <button class="close-button" aria-label="Close">
          <i data-feather="x"></i>
        </button>
        <img id="fullSizeImage" src="" alt="" />
      </div>

      <!-- Additional Content -->
      <div class="content">
        <Content />
      </div>
    </main>
</Layout>

    <style>
      main {
        max-width: 1600px;
        margin: 0 auto;
        padding: 120px 0 40px 0;
      }

      .content-wrapper {
        padding: 0 15%;
      }

      .photo-grid {
        padding: 0 15%;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
        margin: 0;
        width: 100%;
        opacity: 0;
        transition: opacity 0.5s ease;
      }

      .photo-grid.loaded {
        opacity: 1;
      }

      .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 0;
        color: var(--text-secondary);
        transition: opacity 0.3s ease;
      }

      .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid var(--text-secondary);
        border-top-color: transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      .loading-state.hidden {
        display: none;
        opacity: 0;
      }

      figure {
        margin: 0;
        padding: 0;
        position: relative;
        aspect-ratio: 1;
        overflow: hidden;
        cursor: pointer;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.5s ease, transform 0.5s ease;
      }

      figure.loaded {
        opacity: 1;
        transform: translateY(0);
      }

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        transition: transform 0.3s ease;
      }

      figure:hover img {
        transform: scale(1.03);
      }

      .back-button {
        display: inline-flex;
        align-items: center;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        transition: color 0.2s ease;
      }

      .back-button:hover {
        color: var(--text-primary);
      }

      .back-button i {
        margin-right: 0.5rem;
        stroke-width: 2px;
      }

      header {
        margin-bottom: 2rem;
        max-width: 800px;
      }

      h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: var(--text-primary);
        letter-spacing: -0.025em;
        line-height: 1.2;
      }

      time {
        display: block;
        color: var(--text-secondary);
        margin-bottom: 0.75rem;
        font-size: 0.875rem;
        font-weight: 400;
      }

      header p {
        font-size: 0.875rem;
        line-height: 1.5;
        color: var(--text-secondary);
        font-weight: 400;
      }

      /* Full Size Image Viewer */
      .full-size-viewer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .full-size-viewer.active {
        display: flex;
        opacity: 1;
      }

      .full-size-viewer img {
        max-width: 90%;
        max-height: 90vh;
        object-fit: contain;
      }

      .close-button {
        position: absolute;
        top: 20px;
        right: 20px;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 8px;
        z-index: 1001;
      }

      .close-button i {
        width: 24px;
        height: 24px;
        stroke-width: 2px;
      }

      @media (max-width: 1400px) {
        .photo-grid {
          grid-template-columns: repeat(3, 1fr);
          padding: 0 10%;
        }
        .content-wrapper {
          padding: 0 10%;
        }
      }

      @media (max-width: 768px) {
        .photo-grid {
          grid-template-columns: repeat(2, 1fr);
          padding: 0 5%;
        }
        .content-wrapper {
          padding: 0 5%;
        }
        h1 {
          font-size: 2rem;
        }
        main {
          padding: 100px 0 24px 0;
        }
      }

      .lock-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      figure[data-locked="true"] {
        cursor: not-allowed;
      }

      figure[data-locked="true"]:hover .lock-overlay {
        opacity: 1;
      }

      figure[data-locked="true"] img {
        filter: blur(10px);
      }

      .lock-overlay i {
        width: 24px;
        height: 24px;
        stroke-width: 2px;
      }

      .photo-item {
        position: relative;
        aspect-ratio: 1;
        overflow: hidden;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.5s ease, transform 0.5s ease;
        cursor: pointer;
      }

      .photo-item.loaded {
        opacity: 1;
        transform: translateY(0);
      }

      .photo-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        transition: transform 0.3s ease;
      }

      .photo-item:hover img {
        transform: scale(1.05);
      }

      .protected-indicator {
        position: absolute;
        top: 0;
        right: 0;
        width: 0;
        height: 0;
        border-style: solid;
        border-width: 0 25px 25px 0;
        border-color: transparent #ffd700 transparent transparent;
        z-index: 2;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .photo-item[data-protection]:not([data-protection="public"]) .protected-indicator {
        opacity: 1;
      }

      .no-access-message {
        display: none;
      }
    </style>

<script>
  let activeCoupons = new Set();

  // Initialize the page
  function initializePage() {
    console.log('Initializing page...');
    
    // Hide loading state immediately
    const loadingState = document.querySelector('.loading-state');
    if (loadingState) {
      loadingState.classList.add('hidden');
    }

    // Show photo grid
    const photoGrid = document.querySelector('.photo-grid') as HTMLElement;
    if (photoGrid) {
      photoGrid.style.opacity = '1';
      photoGrid.classList.add('loaded');
    }

    // Load saved coupons and update access
    loadCoupons();

    // Set up storage event listener for coupon changes
    window.addEventListener('storage', (e) => {
      if (e.key === 'photoCoupons') {
        console.log('Storage changed:', e.newValue);
        loadCoupons();
      }
    });
  }

  // Load coupons from localStorage
  function loadCoupons() {
    const savedCoupons = localStorage.getItem('photoCoupons');
    console.log('Loading coupons from storage:', savedCoupons);
    
    if (savedCoupons) {
      try {
        const parsed = JSON.parse(savedCoupons);
        console.log('Parsed coupons:', parsed);
        
        if (Array.isArray(parsed)) {
          activeCoupons = new Set(parsed);
          console.log('Active coupons:', Array.from(activeCoupons));
        }
      } catch (e) {
        console.error('Failed to parse saved coupons:', e);
        activeCoupons = new Set();
      }
    } else {
      console.log('No saved coupons found');
      activeCoupons = new Set();
    }

    updatePhotoAccess();
  }

  // Update photo visibility based on access
  function updatePhotoAccess() {
    console.log('Updating photo access...');
    const photos = document.querySelectorAll('.photo-item');
    let protectedCount = 0;
    let publicCount = 0;
    let accessibleCount = 0;

    photos.forEach((photo, index) => {
      if (!photo) return;
      
      const element = photo as HTMLElement;
      const protection = element.dataset.protection || 'public';
      console.log(`Photo ${index}:`, { protection, activeCoupons: Array.from(activeCoupons) });
      
      // Default to showing the photo
      element.style.display = 'block';
      element.classList.add('loaded');

      if (protection === 'public') {
        publicCount++;
        accessibleCount++;
        console.log(`Photo ${index} is public, showing`);
      } else {
        protectedCount++;
        const hasAccess = activeCoupons.has(protection);
        console.log(`Photo ${index} is protected:`, { protection, hasAccess });
        
        if (hasAccess) {
          accessibleCount++;
          element.style.display = 'block';
          console.log(`Photo ${index} has access, showing`);
        } else {
          element.style.display = 'none';
          console.log(`Photo ${index} no access, hiding`);
        }
      }
    });

    // Log final stats
    console.log('Album stats:', {
      totalPhotos: photos.length,
      publicPhotos: publicCount,
      protectedPhotos: protectedCount,
      accessiblePhotos: accessibleCount,
      activeCoupons: Array.from(activeCoupons)
    });
  }

  // Setup image viewer
  function setupImageViewer() {
    const viewer = document.getElementById('fullSizeViewer') as HTMLDivElement;
    const fullSizeImage = document.getElementById('fullSizeImage') as HTMLImageElement;
    
    if (!viewer || !fullSizeImage) {
      console.error('Viewer elements not found');
      return;
    }
    
    const closeButton = viewer.querySelector('.close-button');
    let currentViewer = viewer;

    // Handle photo clicks
    document.querySelectorAll('.photo-item').forEach((photo, index) => {
      photo.addEventListener('click', () => {
        console.log(`Photo ${index} clicked`);
        const imgSrc = (photo as HTMLElement).dataset.image;
        if (imgSrc) {
          console.log('Opening image:', imgSrc);
          fullSizeImage.src = imgSrc;
          currentViewer.classList.add('active');
          document.body.style.overflow = 'hidden';
        }
      });
    });

    // Handle close button click
    closeButton?.addEventListener('click', () => {
      closeViewer();
    });

    // Handle ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeViewer();
      }
    });

    // Handle click outside image
    currentViewer.addEventListener('click', (e) => {
      if (e.target === currentViewer) {
        closeViewer();
      }
    });

    function closeViewer() {
      currentViewer.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', () => {
    console.log('Page loaded, initializing...');
    initializePage();
    setupImageViewer();
  });

  // Initialize immediately if document is already loaded
  if (document.readyState === 'complete') {
    console.log('Document already loaded, initializing...');
    initializePage();
    setupImageViewer();
  }
</script>